# author: @raj-ch017


"""
Exercise 2

Consider a circle inscribed in a square. The ratio of their areas (the ratio of the area of the circle to the area of the square) is  𝜋4 . 
In this six-part exercise, we will find a way to approximate this value.

      Exercise 2a

      Using the math library, calculate and print the value of  𝜋/4
      
"""

#code:

import math

print(math.pi/4)

a = round(math.pi/4,6)
print(a)


"""

      Exercise 2b
  
      Using random.uniform(), create a function rand() that generates a single float between  −1  and  1 .
      Call rand() once. For us to be able to check your solution, we will use random.seed() to fix the seed value of the random number generator.
      
"""

#code:

import random

random.seed(1) # Fixes the see of the random number generator.

def rand():
    val = random.uniform(-1,1)
    return val

rand()


"""

      Exercise 2c

      The distance between two points x and y is the square root of the sum of squared differences along each dimension of x and y. 
      Write a functiondistance(x, y) that takes two vectors as its input and outputs the distance between them. 
      Use your function to find the distance between  𝑥=(0,0)  and  𝑦=(1,1)
      
"""

#code:

import numpy as np

def distance(x, y):
   # x vector contains (x1,x2)
    # y vector contains (y1,y2)
    
    x_diff = x[0] - y[0]
    y_diff = x[1] - y[1]
    total = ((x_diff **2) + (y_diff **2)) ** (0.5)
    return total

list1 = [0,0]
x = np.array(list1)
list2 = [1,1]
y = np.array(list2)

print(distance(x,y))


"""

      Exercise 2d
      
      Write a function in_circle(x, origin) that determines whether a point in a two dimensional plane falls within a unit circle surrounding a given origin.
      Your function should return a boolean True if the distance between x and origin is less than 1 and False otherwise.
      Use distance(x, y) as defined in 2c.
      Use your function to determine whether the point (1,1) lies within the unit circle centered at (0,0).
      
"""

#code:

def in_circle(x, origin = [0,0]):
    dist = distance(x,[0,0])
    if dist < 1:
        return True
    else:
        return False
    
in_circle((1,1))


"""

      Exercise 2e
      
      Create a list inside of R=10000 booleans that determines whether or not a point falls within the unit circle centered at (0,0).
      Use the rand function from 2b to generate R randomly located points.
      Use the function in_circle to test whether or not a given pint falls within the unit circle.
      Find the proportion of points that fall within the circle by summing all True values in the inside list; then divide the answer by R to obtain a proportion.
      Print your answer. This proportion is an estimate of the ratio of the two areas!
      
"""

#code:

random.seed(1) 

R = 10000
inside = []

for i in range(R):
    x_val = random.uniform(-1,1)
    y_val = random.uniform(-1,1)
    inside.append((x_val,y_val))
    
true_count = 0
false_count = 0

for ele in inside:
    outcome = in_circle(ele)
    if outcome == True:
        true_count += 1
    else:
        false_count += 1
        
print("{} points fall within the circle".format(true_count/R))


"""

      Exercise 2f
      
      Find the difference between your estimate from part 2e and math.pi / 4. Note: inside and R are defined as in Exercise 2e.
      
"""

#code:

true_val = (true_count) / R

diff = (math.pi/4) - true_val
print(diff)
