# author: @raj-ch017

"""
Exercise 3

A list of numbers representing measurements obtained from a system of interest can often be noisy. 
One way to deal with noise to smoothen the values by replacing each value with the average of the value and the values of its neighbors.

      Exercise 3a

      Write a function moving_window_average(x, n_neighbors) that takes a list x and the number of neighbors n_neighbors on 
      either side of a given member of the list to consider.
      For each value in x, moving_window_average(x, n_neighbors) computes the average of the value and the values of its neighbors.
      moving_window_average should return a list of averaged values that is the same length as the original list.
      If there are not enough neighbors (for cases near the edge), substitute the original value for a neighbor for each missing neighbor.
      Use your function to find the moving window sum of x=[0,10,5,3,1,5] and n_neighbors=1.
      
"""

#code:

def moving_window_average(x,n_neighbours=1):

    n = len(x)
    width = n_neighbours * 2 + 1
    x = [x[0]] * n_neighbours + x + [x[-1]] * n_neighbours
    out_list = []
    val_list = []

    for the_index in range(n):
        val_list = x[the_index:(the_index+width)]
        value = sum(val_list) / len(val_list)
        out_list.append(value)
        val_list = []

    return out_list

x = [0,10,5,3,1,5]
print(moving_window_average(x, 1))


"""

      Exercise 3b
      
      Compute and store R=1000 random values from 0-1 as x.
      Compute the moving window average for x for values of n_neighbors ranging from 1 to 9 inclusive.
      Store x as well as each of these averages as consecutive lists in a list called Y.
      
"""

#code:

random.seed(1) # This line fixes the value called by your function,
               # and is used for answer-checking.
    
R = 1000
x = []

for i in range(R):
    x.append(random.uniform(0,1))
    
Y = []

n_neighbours = range(1,25)

for val in n_neighbours:
    out = moving_window_average(x,val)
    Y.append(out)
    
#print(Y)

#print(Y[4][9])


"""

      Exercise 3c
      
      For each list in Y, calculate and store the range (the maximum minus the minimum) in a new list ranges.
      Print your answer. As the window width increases, does the range of each list increase or decrease? Why do you think that is?
      
"""

#code:

ranges = []

for ele in Y:
    max_val = max(ele)
    min_val = min(ele)
    ranges.append(max_val - min_val)
    
print(ranges)
