# author: @raj-ch017

"""
      
      Exercise 11

      In the previous exercise, we see that when guessing at random, it's better to go first, as expected. Let's see if Player 1 can improve their strategy.

      Instructions:
      
      Create a function play_strategic_game(), where Player 1 always starts with the middle square, and otherwise both players place their markers randomly.
      Call play_strategic_game 1000 times.
      
"""

random.seed(1)

def play_strategic_game():
    """
        Function that optimizes the strategy of winning for player 1 by placing his first marker in the middle square
    """

    def random_place_strategy(board,player):
        """
            select available board position at random and place a marker there for player
        """

        available_pos = possibilities(board)

        if len(available_pos) == 9 and player == 1:
            board = place(board,player,(1,1))

        else:
            rand_r, rand_c = random.choice(available_pos)
            board = place(board,player,(rand_r,rand_c))

        return board

    the_board = create_board()

    flag = 0
    player_list = [1,2]

    while flag != (-1) or flag != (1) or flag != (2):

        for player in player_list:
            after_board = random_place_strategy(the_board, player)
            #print(after_board)
           #print()
            flag = evaluate(after_board)

            if flag == 1 or flag == 2 or flag == -1:
                return flag
                break
        
        the_board = after_board
        
results_new = []

for k in range(1000):
    outcome = play_strategic_game()
    results_new.append(str(outcome))
    
results_new.count("1")
